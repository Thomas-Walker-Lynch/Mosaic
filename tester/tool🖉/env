#!/usr/bin/env bash
script_afp=$(realpath "${BASH_SOURCE[0]}")

# input guards

  env_must_be="tool_shared/bespokeðŸ–‰/env"
  error_bad_env=false
  error_not_sourced=false
  if [ "$ENV" != "$env_must_be" ]; then
    echo "$(script_fp):: error: must be run in the $env_must_be environment"
    error_bad_env=true
  fi
  if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    echo "$script_afp:: This script must be sourced, not executed."
    error_not_sourced=true
  fi
  if $error_not_sourced; then exit 1; fi
  if $error_bad_env; then return 1; fi

#--------------------------------------------------------------------------------
# arguments

  if [[ -x "$1" ]]; then MODE=$1; else MODE=release; fi
  export MODE
  echo "MODE: $MODE"

#--------------------------------------------------------------------------------
# so we can do testing

export PATH=\
"$REPO_HOME"/tester/toolðŸ–‰/\
:"$JAVA_HOME"/bin\
:"$PATH"

# so we can run individual built tests wrappers
export PATH=\
"$REPO_HOME"/tester/bash\
:"$PATH"

#--------------------------------------------------------------------------------
# class/source paths

BASE_CLASSPATH="$JAVA_HOME"/lib:"$REPO_HOME"/tester/log
BASE_SOURCEPATH="$REPO_HOME"/tester/javacðŸ–‰

case "$MODE" in

# Classes, and other-than-tester sources if present, come from the release candidate. This is the normal MODE for regression testing.
#  
# Release candidate sources, if present, are for viewing only. If sources are present in the release, but can not be read directly from the jar file, expand the jar file onto the scratchpad and replace that include line with this one:
#
# :$REPO_HOME/release/scratchpad\
#
  release)

export CLASSPATH=\
"$BASE_CLASSPATH\
:$REPO_HOME/tester/scratchpad
:$REPO_HOME/release/${PROJECT}.jar\
:$CLASSPATH"

export SOURCEPATH=\
"$BASE_SOURCEPATH\
:$REPO_HOME/release/${PROJECT}.jar\
:$SOURCEPATH"

    ;;


# Classes and other-than-tester sources come from developer/scratchpad. This is the normal MODE for the developer when debugging test failures.
#
# While in env_developer, the developer must make the project and gather third party
# tools and sources into the scratchpad for this to work.
#
  developer)

export CLASSPATH=\
"$BASE_CLASSPATH\
:$REPO_HOME/tester/scratchpad\
:$REPO_HOME/developer/scratchpad\
:$CLASSPATH"

export SOURCEPATH=\
"$BASE_SOURCEPATH\
:$REPO_HOME/developer/scratchpad\
:$SOURCEPATH"

    ;;

# Classes and other-than-tester sources come from tester/scratchpad. This MODE gives the tester complete control over what to include in the test environment.
#
# Tester expands everything to be included into the test environment into the scratchpad.
# 
# Any changes made to must be exported to the environment the files came from if they are to persist.
#
  local)

export CLASSPATH=\
"$BASE_CLASSPATH
:$REPO_HOME/tester/scratchpad\
:$CLASSPATH"

export SOURCEPATH=\
"$BASE_SOURCEPATH\
:$REPO_HOME/tester/scratchpad\
:$SOURCEPATH"

    ;;

# default
  
  *)
    echo "Unknown MODE: $MODE"
    return 1
    ;;
  
  esac

echo CLASSPATH:
vl echo "$CLASSPATH"
echo SOURCEPATH:
vl echo "$SOURCEPATH"
echo PATH:
vl echo $PATH

#--------------------------------------------------------------------------------
# misc

  # make .githolder and .gitignore visible
  alias ls="ls -a"
  export PROMPT_DECOR="$PROJECT"_tester
  export ENV=$(script_fp)
  echo ENV "$ENV"
  cd "$REPO_HOME"/tester/
