package com.ReasoningTechnology.Mosaic;

import java.lang.reflect.Method;
import java.util.Arrays;
import com.ReasoningTechnology.Mosaic.Mosaic_IsPrimitive;

public class Mosaic_FunctionSignature {
  private final String method_name;
  private final Class<?>[] parameter_types;

  public FunctionSignature(String method_name ,Class<?>[] parameter_types){
    this.method_name = method_name;
    this.parameter_types = parameter_types;
  }

  public FunctionSignature(String method_name ,Object[] args){
    this.method_name = method_name;
    this.parameter_types = resolve_parameter_types(args);
  }

  public FunctionSignature(Method method){
    this.method_name = method.getName();
    this.parameter_types = method.getParameterTypes();
  }

  private static Class<?>[] resolve_parameter_types(Object[] arg_list){
    Class<?>[] parameter_types = new Class<?>[arg_list.length];
    for( int i = 0; i < arg_list.length; i++ ){
      if( arg_list[i] instanceof Mosaic_IsPrimitive ){
        parameter_types[i] = ((Mosaic_IsPrimitive) arg_list[i]).get_type();
      }else if( arg_list[i] != null ){
        parameter_types[i] = arg_list[i].getClass();
      }else{
        parameter_types[i] = null;
      }
    }
    return parameter_types;
  }

  public String get_method_name(){
    return method_name;
  }

  public Class<?>[] get_parameter_types(){
    return parameter_types;
  }

  @Override
  public boolean equals(Object o){
    if( this == o ) return true;
    if( o == null || getClass() != o.getClass() ) return false;
    FunctionSignature signature = (FunctionSignature) o;
    return method_name.equals(signature.method_name) &&
           java.util.Arrays.equals(parameter_types ,signature.parameter_types);
  }

  @Override
  public int hashCode(){
    int result = method_name.hashCode();
    result = 31 * result + java.util.Arrays.hashCode(parameter_types);
    return result;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(method_name).append("(");
    for (int i = 0; i < parameter_types.length; i++) {
      sb.append(parameter_types[i].getSimpleName());
      if (i < parameter_types.length - 1) sb.append(", ");
    }
    sb.append(")");
    return sb.toString();
  }

}

